// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Infrastructure.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ChildQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ParentQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentQuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Infrastructure.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecyclingFactoryId")
                        .HasColumnType("int");

                    b.Property<int>("RecyclingPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .IsUnique();

                    b.HasIndex("MaterialSubTypeId");

                    b.HasIndex("RecyclingFactoryId");

                    b.HasIndex("RecyclingPointId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Infrastructure.Models.MaterialSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("MaterialSubType");
                });

            modelBuilder.Entity("Infrastructure.Models.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("Infrastructure.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialSubTypeId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Infrastructure.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ParentAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentAnswerId")
                        .IsUnique()
                        .HasFilter("[ParentAnswerId] IS NOT NULL");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Infrastructure.Models.RecyclingFactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecyclingFactory");
                });

            modelBuilder.Entity("Infrastructure.Models.RecyclingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecyclingPoint");
                });

            modelBuilder.Entity("RecyclingFactoryRecyclingPoint", b =>
                {
                    b.Property<int>("RecyclingFactoriesId")
                        .HasColumnType("int");

                    b.Property<int>("RecyclingPointsId")
                        .HasColumnType("int");

                    b.HasKey("RecyclingFactoriesId", "RecyclingPointsId");

                    b.HasIndex("RecyclingPointsId");

                    b.ToTable("RecyclingFactoryRecyclingPoint");
                });

            modelBuilder.Entity("Infrastructure.Models.Answer", b =>
                {
                    b.HasOne("Infrastructure.Models.Question", "ParentQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("ParentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentQuestion");
                });

            modelBuilder.Entity("Infrastructure.Models.Material", b =>
                {
                    b.HasOne("Infrastructure.Models.Answer", "Answer")
                        .WithOne("Material")
                        .HasForeignKey("Infrastructure.Models.Material", "AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.MaterialSubType", "MaterialSubType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.RecyclingFactory", "RecyclingFactory")
                        .WithMany("Materials")
                        .HasForeignKey("RecyclingFactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.RecyclingPoint", "RecyclingPoint")
                        .WithMany("Materials")
                        .HasForeignKey("RecyclingPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("MaterialSubType");

                    b.Navigation("RecyclingFactory");

                    b.Navigation("RecyclingPoint");
                });

            modelBuilder.Entity("Infrastructure.Models.MaterialSubType", b =>
                {
                    b.HasOne("Infrastructure.Models.MaterialType", null)
                        .WithMany("MaterialSubTypes")
                        .HasForeignKey("MaterialTypeId");
                });

            modelBuilder.Entity("Infrastructure.Models.Property", b =>
                {
                    b.HasOne("Infrastructure.Models.Material", null)
                        .WithMany("Properties")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Infrastructure.Models.MaterialSubType", null)
                        .WithMany("Properties")
                        .HasForeignKey("MaterialSubTypeId");
                });

            modelBuilder.Entity("Infrastructure.Models.Question", b =>
                {
                    b.HasOne("Infrastructure.Models.Answer", "ParentAnswer")
                        .WithOne("ChildQuestion")
                        .HasForeignKey("Infrastructure.Models.Question", "ParentAnswerId");

                    b.Navigation("ParentAnswer");
                });

            modelBuilder.Entity("RecyclingFactoryRecyclingPoint", b =>
                {
                    b.HasOne("Infrastructure.Models.RecyclingFactory", null)
                        .WithMany()
                        .HasForeignKey("RecyclingFactoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.RecyclingPoint", null)
                        .WithMany()
                        .HasForeignKey("RecyclingPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Answer", b =>
                {
                    b.Navigation("ChildQuestion");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Infrastructure.Models.Material", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.Models.MaterialSubType", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Infrastructure.Models.MaterialType", b =>
                {
                    b.Navigation("MaterialSubTypes");
                });

            modelBuilder.Entity("Infrastructure.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Infrastructure.Models.RecyclingFactory", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Infrastructure.Models.RecyclingPoint", b =>
                {
                    b.Navigation("Materials");
                });
#pragma warning restore 612, 618
        }
    }
}
